
services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: vaero_dev
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API (for production-like testing)
  backend:
    build:
      context: .
      dockerfile: apps/backend/Dockerfile
    restart: unless-stopped
    ports:
      - "4000:4000"
    environment:
      DATABASE_URL: "postgresql://postgres:password@postgres:5432/vaero_dev"
      REDIS_URL: "redis://redis:6379"
      CLERK_PUBLISHABLE_KEY: "${CLERK_PUBLISHABLE_KEY}"
      CLERK_SECRET_KEY: "${CLERK_SECRET_KEY}"
      OPENAI_API_KEY: "${OPENAI_API_KEY}"
      AI_ONNX_MODEL_PATH: "/app/models/weather-advisor.onnx"
      AI_TRANSFORMERS_MODEL: "Xenova/Qwen2-0.5B-Instruct"
      AI_ENABLE_BACKGROUND_PROCESSING: "true"
      YR_USER_AGENT: "Vaero Weather App v1.0.0 (contact@vaero.com)"
      YR_FROM_EMAIL: "contact@vaero.com"
      PORT: 4000
      NODE_ENV: production
      ALLOWED_ORIGINS: "http://localhost:3000,http://localhost:3002,http://web:3000"
      VAPID_PUBLIC_KEY: "${VAPID_PUBLIC_KEY}"
      VAPID_PRIVATE_KEY: "${VAPID_PRIVATE_KEY}"
      VAPID_SUBJECT: "${VAPID_SUBJECT}"
      EXPO_ACCESS_TOKEN: "${EXPO_ACCESS_TOKEN}"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./.env:/app/.env
      - ./models:/app/models:ro
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:4000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Web Frontend
  web:
    build:
      context: .
      dockerfile: apps/web/Dockerfile
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      NEXT_PUBLIC_API_URL: "http://backend:4000"
      NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: "${CLERK_PUBLISHABLE_KEY}"
      # The Next.js app expects these env vars with specific names
      CLERK_SECRET_KEY: "${CLERK_SECRET_KEY}"
      # We also need to set the trusted domain for Clerk
      NEXT_PUBLIC_CLERK_SIGN_IN_URL: "/auth/sign-in"
      NEXT_PUBLIC_CLERK_SIGN_UP_URL: "/auth/sign-up"
      NEXT_PUBLIC_CLERK_AFTER_SIGN_IN_URL: "/dashboard"
      NEXT_PUBLIC_CLERK_AFTER_SIGN_UP_URL: "/dashboard"
      NODE_ENV: production
      PORT: 3000
    depends_on:
      backend:
        condition: service_healthy
    volumes:
      - ./.env:/app/.env
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  redis_data:
